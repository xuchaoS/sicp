(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (real-time-clock)))
(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (real-time-clock) start-time))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))

(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
	((divides? test-divisor n) test-divisor)
	(else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))

;(define (search-for-primes a b)
  ;(if (even? a)
      ;()
      ;(timed-prime-test a ))
  ;(if (= a b)
      ;(display "done")
      ;(search-for-primes (+ a 1) b)))

(define (search-for-primes a b)
  (if (= b 0)
      (display "done")
      (if (prime? a)
	  (s (+ a 1) (- b 1))
	  (search-for-primes (+ a 1) b))))
(define (s a b)
  (timed-prime-test (- a 1))
  (search-for-primes a b))

;(search-for-primes 1000 1019)
;(search-for-primes 10000 10037)
;(search-for-primes 100000 100043)
(search-for-primes 1000 3)
(search-for-primes 10000 3)
(search-for-primes 100000 3)
(search-for-primes 1000000 3)
(search-for-primes 10000000 3)
(search-for-primes 100000000 3)
(search-for-primes 1000000000 3)
(search-for-primes 10000000000 3)
(search-for-primes 100000000000 3)
(search-for-primes 1000000000000 3)


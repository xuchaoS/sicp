(define (expmod base exp m)
  (cond ((= exp 0) 1)
	((even? exp)
	 (remainder (square (expmod base (/ exp 2) m))
		    m))
	(else
	  (remainder (* base (expmod base (- exp 1) m))
		     m))))
(define (test n)
  (define (t n a)
    (if (= n a)
	true
	(if (= a (expmod a n n))
	    (t n (+ a 1))
	    false)))
  (t n 0))

(test 561)
(test 1105)
(test 1729)
(test 2465)
(test 2821)
(test 6601)
(test 6602)
(test 199)
